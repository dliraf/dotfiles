#!/bin/bash

if [ -z "$(gcloud auth list --filter=status:ACTIVE --format="value(account)")" ]; then
  echo "Not authenticated to Google GCP"
  echo "Run the following two commands to authenticate:"
  echo "  gcloud auth login"
  echo "  gcloud auth application-default login"
  echo "And you probably want to run this unrelated command as well"
  echo "  gcloud auth configure-docker"
fi

if [ -z "${GCP_ORGANIZATION}" ]; then
    echo "GCP_ORGANIZATION not set"
    echo "Please create a .envrc file in the same directory as this 'update' file"
    echo "GCP_ORGANIZATION=<Google GCP organization id>"
    echo ""
    echo "Don't forget 'direnv allow' afterwards to to enable loading of the file"
    exit
fi

ORG_DIR=$PWD
#declare -A folders

get_root_folders () {
echo "Checking root folders for organization, $GCP_ORGANIZATION"
for ROOT_FOLDER_ID in $(gcloud alpha resource-manager folders list --organization $GCP_ORGANIZATION --format "value(ID)")
  do
    ROOT_FOLDER_NAME=$(gcloud resource-manager folders describe $ROOT_FOLDER_ID | grep displayName | sed 's/displayName: //g')

    if [ ! -d $ROOT_FOLDER_NAME ]; then
      echo "Root folder ($ROOT_FOLDER_NAME) doesn't exist. Creating..."
      mkdir $ROOT_FOLDER_NAME
    fi

    get_folders $ROOT_FOLDER_ID $ROOT_FOLDER_NAME
  done
}

get_folders () {
echo " "
echo "Checking folders for folder, $2 ($1)"

cd $2

get_projects $1 $2

for FOLDER_ID in $(gcloud alpha resource-manager folders list --folder $1 --format "value(ID)")
  do
    FOLDER_NAME=$(gcloud resource-manager folders describe $FOLDER_ID | grep displayName | sed 's/displayName: //g')

    if [ ! -d $FOLDER_NAME ]; then
      echo "Folder ($FOLDER_NAME) doesn't exist. Creating..."
      mkdir $FOLDER_NAME
    fi

    get_folders $FOLDER_ID $FOLDER_NAME
  done

cd ..
}

get_projects() {
echo "Checking projects for folder, $2 ($1)"

for PROJECT_ID in $(gcloud projects list --filter "parent.id=$1 AND parent.type=folder" --format "value(PROJECT_ID)")
  do
    echo "project: $PROJECT_ID, folder: $2"
    if [ ! -d $PROJECT_ID ]; then
      echo "Project ($PROJECT_ID) doesn't exist. Creating..."
      mkdir $PROJECT_ID
      echo "export CLOUDSDK_CORE_PROJECT=$PROJECT_ID" > $PROJECT_ID/.envrc
      echo "source_up" >> $PROJECT_ID/.envrc
      direnv allow $PROJECT_ID
    fi

    get_clusters $PROJECT_ID
  done
}

get_clusters () {
  for cluster in $(gcloud container clusters list --project $1 --format "value(name)")
  do
    echo ""
    echo "Handling cluster: $cluster"
    PWD=`pwd`
    cluster_dir=$PWD/$1/$cluster
    [ ! -d "$cluster_dir" ] && mkdir -p "$cluster_dir"

    export KUBECONFIG=$cluster_dir/.kubeconfig
    gcloud container clusters get-credentials $cluster --project $1 --quiet --region europe-north1 > /dev/null 2>&1
    echo "export KUBECONFIG=$cluster_dir/.kubeconfig" > $cluster_dir/.envrc
    echo "source_up" >> $cluster_dir/.envrc
    cp $ORG_DIR/.update-namespaces.template $cluster_dir/update-namespaces
    direnv allow $cluster_dir
    cd $cluster_dir
    echo "Updating namespaces for cluster, $cluster"
    ./update-namespaces
    cd -
  done
}

get_root_folders
